from flask import Flask
import threading
import os
import requests
import schedule
import time
from datetime import datetime
import pytz

print("üöÄ INICIANDO BOT - C√ìDIGO CORRIGIDO!")

# Servidor web simples para manter porta aberta
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ DEEPTRADER BOT ONLINE - RENDER 24/7 - BOT ATIVO!"

def run_web_server():
    port = int(os.environ.get('PORT', 10000))
    print(f"üåê Servidor web na porta {port}")
    app.run(host='0.0.0.0', port=port)

# Configura√ß√µes do Telegram
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', '')
TELEGRAM_CHANNEL_ID = os.environ.get('TELEGRAM_CHANNEL_ID', '')

# Configurar fuso hor√°rio de S√£o Paulo
timezone_brasil = pytz.timezone('America/Sao_Paulo')

def get_horario_brasilia():
    """Retorna o hor√°rio atual de Bras√≠lia"""
    return datetime.now(timezone_brasil)

# Estrat√©gia de Sinais - 24H
SINAIS_DIA = {
    # MADRUGADA
    "00:00": {"ativo": "BTC/USDT", "direcao": "VENDA", "prob": 82},
    "01:00": {"ativo": "ETH/USDT", "direcao": "COMPRA", "prob": 83},
    "02:00": {"ativo": "XRP/USDT", "direcao": "VENDA", "prob": 81},
    "03:00": {"ativo": "BTC/USDT", "direcao": "COMPRA", "prob": 84},
    "04:00": {"ativo": "ETH/USDT", "direcao": "VENDA", "prob": 82},
    "05:00": {"ativo": "XRP/USDT", "direcao": "COMPRA", "prob": 83},
    
    # MANH√É
    "07:00": {"ativo": "BTC/USDT", "direcao": "COMPRA", "prob": 92},
    "08:00": {"ativo": "ETH/USDT", "direcao": "VENDA", "prob": 84},
    "09:00": {"ativo": "XRP/USDT", "direcao": "COMPRA", "prob": 91},
    "10:00": {"ativo": "BTC/USDT", "direcao": "VENDA", "prob": 86},
    "11:00": {"ativo": "ETH/USDT", "direcao": "COMPRA", "prob": 94},
    
    # TARDE
    "12:00": {"ativo": "XRP/USDT", "direcao": "VENDA", "prob": 87},
    "13:00": {"ativo": "BTC/USDT", "direcao": "COMPRA", "prob": 92},
    "14:00": {"ativo": "ETH/USDT", "direcao": "VENDA", "prob": 84},
    "15:00": {"ativo": "XRP/USDT", "direcao": "COMPRA", "prob": 89},
    "16:00": {"ativo": "BTC/USDT", "direcao": "VENDA", "prob": 91},
    "17:00": {"ativo": "ETH/USDT", "direcao": "COMPRA", "prob": 93},
    
    # NOITE
    "19:00": {"ativo": "XRP/USDT", "direcao": "COMPRA", "prob": 88},
    "20:00": {"ativo": "BTC/USDT", "direcao": "COMPRA", "prob": 85},
    "21:00": {"ativo": "ETH/USDT", "direcao": "COMPRA", "prob": 90},
    "22:00": {"ativo": "XRP/USDT", "direcao": "VENDA", "prob": 86},
}

def enviar_sinal_telegram(horario):
    """Envia sinal para o Telegram"""
    try:
        if horario in SINAIS_DIA:
            sinal = SINAIS_DIA[horario]
            
            hora_brasilia = get_horario_brasilia().strftime('%H:%M')
            print(f"üéØ [{hora_brasilia}] Enviando sinal {horario} - {sinal['ativo']} {sinal['direcao']}")
            
            # Calcular segundas chances
            hora = int(horario.split(":")[0])
            minuto = int(horario.split(":")[1])
            
            segunda_chance = f"{hora:02d}:{minuto+5:02d}"
            terceira_chance = f"{hora:02d}:{minuto+10:02d}"
            
            emoji = "üü¢" if sinal["direcao"] == "COMPRA" else "üî¥"
            
            mensagem = f"""
üéØ *SINAL CONFIRMADO - CRYPTO* üéØ

üí∞ *Par: {sinal['ativo']}*
üìä *Dire√ß√£o: {sinal['direcao']}* {emoji}
‚è∞ *Hor√°rio: {horario}*
üé∞ *Probabilidade: {sinal['prob']}%*

‚ö° *ENTRADA IMEDIATA*
üîÑ *GALE 1: {segunda_chance}*
üîÑ *GALE 2: {terceira_chance}*

üìà *MARTINGALE RECOMENDADO*

‚ö†Ô∏è *Opere com responsabilidade!*
ü§ñ *DeepTrader Pro - ATIVO!*
            """
            
            if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHANNEL_ID:
                print("‚ùå Vari√°veis de ambiente n√£o configuradas!")
                return
            
            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
            payload = {
                "chat_id": TELEGRAM_CHANNEL_ID,
                "text": mensagem,
                "parse_mode": "Markdown"
            }
            
            response = requests.post(url, json=payload)
            
            if response.status_code == 200:
                print(f"‚úÖ Sinal {horario} enviado com SUCESSO!")
            else:
                print(f"‚ùå Erro {response.status_code} ao enviar sinal {horario}")
                
    except Exception as e:
        print(f"‚ùå Erro em {horario}: {e}")

def agendar_sinais():
    """Agenda todos os sinais do dia"""
    for horario in SINAIS_DIA.keys():
        schedule.every().day.at(horario).do(enviar_sinal_telegram, horario)
    print(f"‚è∞ {len(SINAIS_DIA)} sinais agendados!")
    
    # Mostrar pr√≥ximos sinais
    hora_brasilia = get_horario_brasilia()
    print(f"üïê Hor√°rio atual: {hora_brasilia.strftime('%H:%M')} (Bras√≠lia)")
    
    print("üìã Pr√≥ximos sinais hoje:")
    for horario in sorted(SINAIS_DIA.keys()):
        sinal = SINAIS_DIA[horario]
        print(f"   üïí {horario} - {sinal['ativo']} - {sinal['direcao']} ({sinal['prob']}%)")

def iniciar_bot():
    """Fun√ß√£o principal do bot"""
    print("=" * 60)
    print("ü§ñ DEEPTRADER PRO BOT - SISTEMA PRINCIPAL INICIADO!")
    print(f"üìä {len(SINAIS_DIA)} sinais/dia - FUSO BRAS√çLIA")
    print("=" * 60)
    
    # Mostrar configura√ß√£o
    hora_brasilia = get_horario_brasilia()
    print(f"üáßüá∑ Hor√°rio Bras√≠lia: {hora_brasilia.strftime('%d/%m/%Y %H:%M')}")
    
    # Testar Telegram
    print("üîç Testando Telegram...")
    if TELEGRAM_BOT_TOKEN and TELEGRAM_CHANNEL_ID:
        try:
            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getMe"
            response = requests.get(url)
            if response.status_code == 200:
                print("‚úÖ Conex√£o Telegram: OK")
                
                # Enviar mensagem de inicializa√ß√£o
                mensagem = f"üöÄ *BOT INICIADO!* üöÄ\n\n‚úÖ Sistema ativo\nüáßüá∑ Hor√°rio: {hora_brasilia.strftime('%H:%M')}\nüìä {len(SINAIS_DIA)} sinais programados\n\nü§ñ _DeepTrader Pro - Online!_"
                url_msg = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
                payload = {
                    "chat_id": TELEGRAM_CHANNEL_ID,
                    "text": mensagem,
                    "parse_mode": "Markdown"
                }
                requests.post(url_msg, json=payload)
                print("‚úÖ Mensagem de inicializa√ß√£o enviada!")
            else:
                print("‚ùå Problema com Telegram")
        except:
            print("‚ö†Ô∏è  Erro no Telegram, mas bot continua...")
    else:
        print("‚ùå Vari√°veis de ambiente n√£o configuradas")
    
    # Agendar sinais
    agendar_sinais()
    
    print("‚è∞ Bot principal rodando - Aguardando hor√°rios...")
    print("üí° Pr√≥ximo sinal: 12:00 - XRP/USDT - VENDA")
    
    # Loop principal do bot
    while True:
        try:
            schedule.run_pending()
            time.sleep(1)
        except Exception as e:
            print(f"‚ùå Erro no loop: {e}")
            time.sleep(30)

# Iniciar servidor web em thread separada
print("üåê Iniciando servidor web em thread separada...")
web_thread = threading.Thread(target=run_web_server)
web_thread.daemon = True
web_thread.start()

print("‚úÖ Servidor web rodando em background!")

# INICIAR O BOT PRINCIPAL
if __name__ == "__main__":
    iniciar_bot()
